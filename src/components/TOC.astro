---
const { title = "NAN", sections = [] } = Astro.props;
const textColor = "text-white";
const hoverColor = "font-bold";
---

<div id="toc-container" class="toc-container">
<nav class="flex-1 overflow-y-auto text-base">
<div style="font-weight: normal; text-decoration: none;">
      <ul class="space-y-2 p-1" style="font-weight: normal; text-decoration: none;">
	      { sections.map((header) => 
	      <li style={"padding-left:" + (header.depth-1) + "rem"} class={textColor + " sidebar-item hover:" + hoverColor}>
		      <a href={"#" + header.slug} class="sidebar-link hover:font-bold" data-slug={header.slug}>{header.text}</a>
	      </li>)}
      </ul>
</div>
</nav>
</div>

<style>
.toc-container {
  transform-origin: top;
  opacity: 1;
  transform: scaleY(1);
  transition: transform 0.3s ease, opacity 0.3s ease;
}

.toc-collapsing {
  opacity: 0;
  transform: scaleY(0);
}

.toc-expanding {
  opacity: 1;
  transform: scaleY(1);
}

.sidebar-link.active {
  font-weight: bold;
}
</style>

<script client:load>
  const activeColor = "text-gray-100";
  // Highlight the current section we are in interactivly
  document.addEventListener('DOMContentLoaded', () => {
    const sidebarLinks = document.querySelectorAll('.sidebar-link');
    const sections = Array.from(sidebarLinks).map(link => document.getElementById(link.dataset.slug)).filter(el => el);

    const observerCallback = (entries) => {
      const visibleEntries = entries.filter(entry => entry.isIntersecting);
      if (visibleEntries.length === 0)
        return;

      visibleEntries.sort((a, b) => a.boundingClientRect.top - b.boundingClientRect.top);
      const slug = visibleEntries[0].target.id;
      const sidebarLink = document.querySelector('.sidebar-link[data-slug="' + slug + '"]');

      sidebarLinks.forEach(link => link.classList.remove('active'));
      sidebarLinks.forEach(link => link.classList.remove(activeColor));
      sidebarLink.classList.add('active');
      sidebarLink.classList.add(activeColor);
    };

    const observerOptions = {
      root: null,
      threshold: 0.2
    };
    
    const observer = new IntersectionObserver(observerCallback, observerOptions);
    
    sections.forEach(section => {
      if (section) observer.observe(section);
    });
  });
</script>
